package project0Katthewm;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

public class BicyclePostgres implements BicycleDAO 
{
	private static ConnectionUtil connUtil = ConnectionUtil.getConnectionUtil();

	
	public static Bicycle createnewbicycle(Bicycle dataToAdd) 
	{
		int generatedId = 0;

		// try-with-resources auto-closes resources
				try (Connection conn = connUtil.getConnection()) {
					// when you run DML statements, you want to manage the TCL
					conn.setAutoCommit(false);
					
					String sql = "insert into bikes (model,brand) "
							+ "values (default, ?, ?)";
					String[] keys = {"id"}; // the name of the primary key column that will be autogenerated
					// creating the prepared statement
					PreparedStatement pStmt = conn.prepareStatement(sql, keys);
					// we need to set the values of the question marks
					pStmt.setString(1, dataToAdd.getBrand()); // question mark index starts at 1
					pStmt.setString(2, dataToAdd.getModel());
					//pStmt.setString(3, ""+dataToAdd.getId());
					
					// after setting the values, we can run the statement
					pStmt.executeUpdate();
					ResultSet resultSet = pStmt.getGeneratedKeys();
					
					if (resultSet.next()) { // "next" goes to the next row in the result set (or the first row)
						// getting the ID value from the result set
						generatedId = resultSet.getInt("id");
						conn.commit(); // running the TCL commit statement
					} else {
						conn.rollback();
					}
					
				} catch (SQLException e) {
					System.out.print("Failed to connect");
					e.printStackTrace();
				}
				
				return dataToAdd;
	}
	public static Set<Bicycle> getBybrand(String brand) 
	{
		Set<Bicycle> bicycles = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) 
		{
			String sql = "select * from bikes where brand=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, brand);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			while (resultSet.next()) 
			{
				Bicycle bike = new Bicycle();
				bike.setId(resultSet.getInt("id"));
				bike.setModel(resultSet.getString("model"));
				bike.setBrand(resultSet.getString("brand"));
				
				bicycles.add(bike);
			}
			
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return bicycles;
	}
	
	public static Set<Bicycle> getBymodel(String model) 
	{
		Set<Bicycle> bicycles = new HashSet<>();
				
				try (Connection conn = connUtil.getConnection()) 
				{
					String sql = "select * from bikes where model=?";
					PreparedStatement pStmt = conn.prepareStatement(sql);
					pStmt.setString(1, model);
					
					ResultSet resultSet = pStmt.executeQuery();
					
					while (resultSet.next()) 
					{
						Bicycle bike = new Bicycle();
						bike.setId(resultSet.getInt("id"));
						bike.setModel(resultSet.getString("model"));
						bike.setBrand(resultSet.getString("brand"));
						
						bicycles.add(bike);
					}
				} 
				catch (SQLException e) 
				{
					e.printStackTrace();
				}
				return bicycles;
	}
	public static Bicycle getbikesById(int id) 
	{
		Bicycle bike = null;

		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from bikes where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) 
			{
				bike = new Bicycle();
				bike.setId(resultSet.getInt("id"));
				bike.setModel(resultSet.getString("model"));
				bike.setBrand(resultSet.getString("brand"));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return bike;
	}
	public Set<Bicycle> getAll() 
	{
		Set<Bicycle> bicycles = new HashSet<>();
				
				try (Connection conn = connUtil.getConnection()) 
				{
					String sql = "select * from bikes";
					Statement stmt = conn.createStatement();
					ResultSet resultSet = stmt.executeQuery(sql);
					
					while (resultSet.next()) 
					{
						Bicycle bike = new Bicycle();
						bike.setId(resultSet.getInt("id"));
						bike.setModel(resultSet.getString("model"));
						bike.setBrand(resultSet.getString("brand"));
						
						bicycles.add(bike);
					}
					
				} 
				catch (SQLException e) 
				{
					e.printStackTrace();
				}
				return bicycles;
	}
	public static void deletebike(Bicycle dataToDelete) 
	{
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);

			String sql = "delete from bikes "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, dataToDelete.getId());

			int rowsAffected = pStmt.executeUpdate();

			if (rowsAffected==1) {
				sql="delete from bikes where id=?";
				PreparedStatement pStmt2 = conn.prepareStatement(sql);
				pStmt2.setInt(1, dataToDelete.getId());
				rowsAffected = pStmt2.executeUpdate();
				
				if (rowsAffected<=1) {
					conn.commit();
				} else {
					conn.rollback();
				}
			} else {
				conn.rollback();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public static void change(Bicycle dataToUpdate) 
	{
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "update bikes set "
					+ "id= ?, model=?,brand=?"
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(2, dataToUpdate.getModel());
			pStmt.setString(3, dataToUpdate.getBrand());
			pStmt.setInt(1, dataToUpdate.getId());
			pStmt.setInt(4, dataToUpdate.getId());

			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				conn.commit();
				System.out.print("commited");
			} else {
				conn.rollback();
				System.out.print("not commited");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public Bicycle getById(int id) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public void update(Bicycle dataToUpdate) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void delete(Bicycle dataToDelete) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public int create(Bicycle dataToAdd) {
		// TODO Auto-generated method stub
		return 0;
	}
}
